import matplotlib.pyplot as plt
import tensorflow as tf
import warnings
import numpy
from sklearn.preprocessing import minmax_scale
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *

# (x_treino, y_treino),(x_teste, y_teste) = recosign.obtem_dataset()
x_treino = numpy.array([
    [4, 8, 16, 11, 7, 8, 9, 7, 5, 3, 0, 0, 3, 5, 5, 3, 2, 3, 5, 4, 2, 3, 5, 6, 2, 1, 3, 5, 3, 4, 7, 7, 6, 6, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 13, 10, 7, 5, 4, 3, 3, 3, 4, 6, 4, 4, 4, 6, 5, 4, 2, 2, 0, 1, 4, 5, 4, 2, 4, 1, 2, 2, 1, 6, 10, 12, 9, 2, 0, 4, 3, 3, 0, 0, 2, 5, 6, 7, 4, 4, 7, 6, 5, 7, 4, 3, 6, 6, 4, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 4, 17, 21, 16, 11, 7, 2, 3, 5, 5, 9, 8, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 7, 5, 4, 6, 15, 14, 11, 8, 5, 5, 3, 2, 1, 4, 4, 0, 0, 0, 3, 6, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 3, 8, 5, 5, 5, 3, 5, 9, 6, 0, 2, 3, 1, 1, 1, 3, 3, 2, 4, 5, 6, 2, 2, 2, 4, 3, 0, 6, 11, 13, 10, 3, 2, 4, 5, 3, 2, 2, 2, 3, 3, 0, 0, 0, 0, 3, 4, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 8, 20, 22, 10, 8, 12, 13, 10, 8, 8, 3, 0, 3, 5, 5, 2, 2, 3, 5, 4, 4, 5, 6, 3, 2, 4, 4, 2, 0, 3, 4, 7, 6, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 18, 14, 8, 7, 7, 5, 5, 5, 5, 5, 4, 5, 4, 2, 7, 10, 8, 6, 4, 3, 3, 2, 2, 5, 6, 4, 1, 3, 3, 2, 2, 2, 2, 7, 17, 14, 7, 0, 0, 5, 5, 0, 0, 4, 5, 4, 0, 2, 3, 5, 5, 6, 7, 6, 7, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 13, 14, 15, 18, 15, 5, 3, 3, 2, 4, 5, 5, 5, 9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 2, 2, 1, 13, 17, 16, 10, 4, 3, 3, 1, 0, 0, 2, 5, 2, 0, 1, 1, 4, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 0, 0, 1, 1, 2, 2, 2, 2, 7, 10, 7, 5, 4, 6, 9, 14, 10, 0, 2, 4, 3, 0, 2, 3, 2, 1, 2, 3, 5, 5, 2, 0, 2, 5, 4, 5, 9, 14, 14, 12, 8, 1, 0, 0, 3, 6, 4, 4, 5, 4, 5, 2, 0, 0, 0, 4, 6, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [2, 1, 1, 1, 1, 1, 3, 2, 2, 2, 2, 2, 4, 6, 7, 8, 9, 14, 7, 4, 4, 4, 0, 7, 9, 2, 0, 2, 4, 4, 5, 5, 3, 5, 6, 3, 2, 3, 8, 10, 4, 3, 5, 8, 5, 0, 0, 2, 3, 2, 1, 0, 0, 2, 7, 8, 3, 0, 0, 0, 0, 2, 1, 2, 4, 2, 0, 4, 6, 3, 3, 6, 8, 5, 5, 3, 2, 5, 5, 3, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 9, 18, 17, 13, 3, 2, 2, 2, 3, 7, 11, 8, 5, 5, 6, 7, 2, 0, 0, 0, 3, 3, 0, 6, 12, 6, 8, 6, 5, 5, 7, 8, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 3, 3, 3, 4, 5, 2, 7, 9, 6, 5, 6, 12, 16, 17, 15, 9, 3, 3, 4, 10, 5, 2, 2, 4, 7, 5, 8, 7, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 4, 5, 7, 5, 4, 3, 3, 3, 4, 4, 6, 9, 6, 6, 4, 3, 3, 3, 2, 10, 10, 8, 4, 2, 2, 4, 8, 11, 9, 5, 2, 0, 1, 3, 7, 8, 3, 0, 0, 4, 8, 6, 2, 2, 3, 5, 9, 11, 10, 9, 6, 4, 4, 2, 5, 3, 2, 6, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 10, 6, 3, 4, 6, 6, 7, 7, 10, 4, 3, 3, 4, 5, 6, 7, 11],
    [1, 1, 1, 2, 5, 7, 6, 4, 6, 6, 6, 5, 8, 4, 2, 3, 6, 5, 3, 3, 2, 3, 7, 9, 6, 9, 6, 3, 2, 3, 4, 0, 1, 2, 3, 6, 0, 0, 0, 2, 4, 6, 2, 0, 0, 3, 2, 1, 0, 0, 1, 4, 5, 4, 1, 1, 0, 0, 0, 3, 6, 0, 0, 0, 3, 5, 4, 2, 1, 1, 1, 1, 3, 8, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 4, 14, 13, 12, 1, 0, 1, 2, 4, 5, 8, 12, 11, 6, 5, 5, 6, 9, 8, 7, 6, 7, 8, 6, 4, 6, 8, 10, 11, 9, 5, 2, 5, 7, 9, 6, 5, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 9, 5, 4, 4, 4, 8, 9, 10, 8, 9, 15, 17, 13, 9, 5, 3, 3, 6, 2, 0, 0, 1, 5, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 1, 2, 3, 3, 4, 8, 7, 3, 0, 0, 0, 1, 2, 3, 6, 9, 9, 5, 0, 0, 0, 3, 7, 7, 10, 6, 0, 0, 1, 4, 4, 2, 0, 7, 7, 6, 3, 5, 8, 8, 7, 10, 14, 15, 14, 10, 8, 5, 4, 2, 3, 2, 2, 3, 7, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 12, 6, 4, 4, 5, 4, 7, 8, 10, 9, 12, 10, 8, 7, 12, 11, 12, 10, 6, 8, 12, 15, 12, 6, 7, 7, 6],
])
y_treino = numpy.array([
    0,
    0,
    1,
    1,
])

x_teste = numpy.array([
    [1, 8, 20, 13, 5, 6, 8, 8, 7, 5, 4, 0, 0, 0, 1, 4, 6, 7, 2, 2, 2, 2, 5, 4, 0, 3, 6, 6, 7, 2, 2, 5, 5, 4, 6, 7, 7, 7, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 8, 9, 4, 3, 3, 2, 2, 4, 4, 4, 3, 4, 5, 5, 5, 5, 6, 5, 5, 4, 5, 3, 1, 0, 0, 2, 4, 6, 7, 7, 3, 2, 2, 5, 7, 6, 6, 3, 2, 2, 9, 15, 14, 9, 5, 2, 5, 7, 7, 2, 2, 4, 5, 7, 7, 8, 4, 4, 4, 5, 8, 7, 3, 5, 7, 8, 8, 8, 9, 8, 7, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 15, 12, 11, 10, 9, 3, 2, 3, 5, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 1, 1, 3, 9, 17, 13, 10, 3, 2, 3, 3, 2, 4, 4, 4, 5, 2, 0, 0, 0, 3, 5, 6, 5, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 4, 2, 2, 1, 1, 2, 4, 4, 3, 5, 4, 5, 10, 9, 3, 3, 2, 3, 3, 3, 5, 2, 0, 0, 2, 5, 6, 5, 2, 2, 2, 3, 4, 3, 1, 2, 10, 14, 12, 8, 3, 2, 0, 3, 4, 3, 3, 2, 3, 5, 6, 1, 0],
    [2, 1, 0, 0, 5, 6, 8, 9, 9, 5, 6, 4, 3, 2, 3, 5, 6, 6, 1, 2, 2, 6, 6, 3, 3, 6, 6, 5, 1, 2, 3, 7, 5, 2, 0, 6, 11, 9, 9, 10, 8, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 12, 15, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 6, 4, 5, 8, 8, 7, 7, 5, 3, 2, 1, 0, 0, 2, 5, 4, 3, 0, 0, 0, 0, 4, 3, 2, 2, 1, 1, 0, 9, 14, 4, 0, 0, 4, 5, 4, 0, 3, 6, 5, 4, 0, 0, 3, 5, 3, 0, 0, 3, 6, 8, 7, 8, 8, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 11, 13, 8, 8, 8, 6, 4, 3, 5, 3, 4, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 4, 2, 3, 2, 9, 17, 15, 14, 10, 4, 6, 4, 4, 5, 4, 4, 5, 5, 0, 0, 0, 1, 3, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 4, 6, 5, 3, 3, 2, 3, 7, 8, 6, 5, 4, 5, 7, 10, 9, 3, 1, 4, 3, 2, 2, 1, 1, 4, 4, 1, 2, 5, 6, 7, 3, 3, 3, 4, 3, 6, 4, 1, 1, 3, 3, 10, 19, 14, 7, 2, 1, 5, 5, 5, 4, 4, 5, 6, 5, 6, 4, 1, 1, 1, 4, 5],
    [1, 1, 0, 1, 2, 4, 6, 10, 7, 5, 0, 0, 3, 3, 6, 5, 1, 1, 5, 7, 1, 2, 1, 1, 4, 4, 0, 2, 5, 3, 6, 6, 2, 5, 6, 4, 1, 2, 0, 6, 2, 0, 0, 1, 1, 2, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 9, 8, 0, 0, 0, 1, 1, 2, 7, 8, 5, 3, 3, 3, 4, 4, 4, 2, 4, 4, 6, 9, 8, 5, 7, 11, 8, 8, 7, 7, 5, 5, 5, 8, 8, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, 5, 4, 4, 4, 4, 3, 9, 11, 9, 8, 8, 8, 12, 17, 15, 9, 8, 5, 4, 5, 7, 1, 1, 1, 4, 6, 8, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 5, 4, 2, 0, 0, 0, 3, 3, 3, 7, 5, 0, 3, 5, 6, 5, 0, 2, 6, 4, 5, 4, 1, 0, 3, 5, 8, 9, 10, 12, 15, 14, 11, 10, 12, 10, 13, 8, 4, 6, 12, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 6, 3, 3, 3, 3, 5, 7, 9, 7, 6, 6, 5, 5, 5, 7, 10, 8, 6, 6, 5, 7, 9, 7, 9, 6, 7, 5, 7],
    [2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 1, 1, 0, 2, 6, 9, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 2, 1, 0, 2, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 3, 3, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 4, 3, 1, 4, 7, 6, 4, 2, 5, 5, 5, 3, 2, 6, 7, 4, 3, 4, 5, 8, 8, 3, 3, 5, 8, 8, 10, 12, 9, 5, 6, 6, 7, 9, 7, 4, 4, 6, 7, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 4, 7, 8, 6, 6, 7, 7, 7, 8, 6, 2, 2, 4, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 3, 3, 3, 4, 1, 0, 0, 0, 1, 2, 4, 8, 11, 1, 2, 2, 3, 5, 4, 5, 4, 2, 0, 0, 1, 4, 1, 0, 0, 1, 1, 3, 4, 5, 5, 5, 6, 5, 6, 8, 6, 2, 1, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 8, 10, 7, 5, 5, 6, 7, 9, 10, 10, 8, 9, 9, 10, 9, 9],
])
y_teste = numpy.array([
    0,
    0,
    1,
    1,
])

x_treino = minmax_scale(x_treino)
x_teste = minmax_scale(x_teste)
x_treino = x_treino.reshape(4, 300, -1)
x_teste = x_teste.reshape(4, 300, -1)


def rnn_model():
    model = Sequential()
    model.add(LSTM(16, input_shape=(300, 1), activation='relu', return_sequences=True))
    model.add(Dropout(0.2))
    model.add(LSTM(16, activation='relu'))
    model.add(Dropout(0.1))
    model.add(Dense(4, activation='relu'))
    model.add(Dropout(0.2))
    model.add(Dense(2, activation='softmax'))
    opt = tf.keras.optimizers.Adam(lr=1e-3, decay=1e-4)
    model.compile(
        loss='sparse_categorical_crossentropy',
        optimizer=opt,
        metrics=['accuracy'],
    )
    return model



def cnn_model():
    model = Sequential()
    model.add(Conv2D(32, (5, 5), input_shape=(300, 1), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.2))
    model.add(Flatten())
    model.add(Dense(128, activation='relu'))
    model.add(Dense(2, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model


model = rnn_model()
model.fit(x_treino, y_treino, epochs=10, validation_data=(x_teste, y_teste))
